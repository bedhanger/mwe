#!/usr/bin/env bash

# It does what the name suggests...
# Simply run with --help and/or study the help routine below to
# find out more.

ME=$(basename ${0})

# The author's preferred way of retrieving messages.
SERVER="pop.gmx.net"

# POP3 over SSL.
PORT=pop3s # 995

# OpenSSL's default is a SHA1 hash.  Fetchmail wants MD5.
FORMAT="md5"

# The workhorse.
OPENSSL=openssl
OPENSSL=$(which ${OPENSSL} 2> /dev/null)
if [ -z "${OPENSSL}" ]
then

   cat << EOM >&2
${ME}: fatal: cannot find openssl command in path
EOM

   exit 2
fi

# Terminate connection to server.
NO_SPEAK_SSL='< /dev/null'

# Control chattiness
verbose=false

function HELP {
   cat << EOM

	${ME} [OPTION...]

Retrieve & display a server's SSL cert (fingerprint)

Primarily useful for querying POP3 machines: the fingerprint is
used in ~/.fetchmailrc to set up SSL retrievals.

However, the defaults can be overwritten to make other
combinations possible.  Therefore, OPTION can be [defaults
shown in brackets]:

	-s, --server <server>		contact a server [pop.gmx.net]
	-p, --port <port>		make a connection to a specified port [pop3s]
	-f, --format <format>		print fingerprint in another format [md5]
	-S, --speak-ssl			keep connection to server open [--no-speak-ssl]
	-N, --no-speak-ssl		close connection to server [this is the default]
	-h, --help			show this & exit
	-v, --verbose [<true|false>]	explain what is going on [false]

EXAMPLE: to see the SHA1 fingerprint of the author's web server
cert, type:

	get-pop3-server-ssl-cert-fingerprint \\
		--server=bedhanger.strangled.net \\
		--port=https \\
		--format=sha1

[Depending on the originating IP address, the server's firewall
 might block the request]

EOM
}

# Process command-line options
options=$(getopt \
	--options='s:p:f:SNhv::' \
	--longoptions='server:,port:,format:,speak-ssl,no-speak-ssl,help,verbose::' \
	--name="${ME}" \
	-- \
	"${@}")
opts_ret=${?}
if [ ${opts_ret} -ne 0 ] ; then
	echo "Try '${ME} --help' for more information"
	exit ${opts_ret}
fi

eval set -- "${options}" ; unset options

while true ; do case "${1}" in

	'-s'|'--server') SERVER="${2}"
		shift 2 ; continue ;;

	'-p'|'--port') PORT="${2}"
		shift 2 ; continue ;;

	'-f'|'--format') FORMAT="${2}"
		shift 2 ; continue ;;

	'-S'|'--speak-ssl') unset NO_SPEAK_SSL
		shift 1 ; continue ;;

	'-N'|'--no-speak-ssl') NO_SPEAK_SSL='< /dev/null'
		shift 1 ; continue ;;

	'-h'|'--help') HELP
		shift 1 ; exit 0 ;;

	'-v'|'--verbose') case "${2}" in
			'')             verbose=true ;;
			'true'|'false') verbose="${2}" ;;
			*)
				echo "Arg to option 'v' must be 'true' or 'false'" >&2
				exit 1 ;;
		esac
		shift 2 ; continue ;;

	'--') : # Exit b4 true turns 2 false
		shift ; break ;;

	*) echo 'Internal error!' >&2
		exit 1 ;;

esac ; done ; for arg ; do echo "(${ME}: Ignoring '${arg}')" >&2 ; done
# Done processing command-line options

${verbose} && {
	cat <<-EOF
		Contacting '${SERVER}' at port '${PORT}'
		Delivering fingerprint in format '${FORMAT}'
	EOF
	if [ "${NO_SPEAK_SSL}" ] ; then
		echo "Will close connection to server"
	else
		echo "Will keep connection to server open"
	fi
}

if [ "${FORMAT}" ]
then
   # The format spec to openssl is not a value, but actually a
   # switch, i.e., "-md5" or "-sha1".  The user could have given
   # a bare expression or one prefixed by a dash, so let's
   # normalise it properly.
   FORMAT=$(perl -p -e 's/^-*/-/;' <<< ${FORMAT})
fi

# Now get cert and extract fingerprint.
eval "( ${OPENSSL} \
     s_client \
     -connect ${SERVER}:${PORT} \
     -servername ${SERVER} \
     -showcerts \
  | \
  ${OPENSSL} \
      x509 \
     -text \
     -noout \
     ${FORMAT} \
     -fingerprint \
) ${NO_SPEAK_SSL}"
