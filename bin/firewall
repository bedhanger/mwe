#!/usr/bin/env bash

# Stringent IP tables firewall, relying heavily on IP sets

# The IP sets mentioned as arguments to  the --match-set options
# below MUST exist for everything to go smoothly.  However,
# creating them is outwith the scope of this script; this has to
# be done a-priori.

# The only concession made is the choice between geok-A and
# geok-B.  Depending on *when* this script is called, either of
# the two *should be* extant (but not both!).  Normally, there
# is a changeover on a monthly basis.

# The geok-{A,B} set is the centerpiece for warding off
# unsolicited incoming traffic.  They should contain the IP
# (ranges) from which you are willing to accept that kind of
# thing.

me=$(basename ${0})
unset geok

# We'll use this a lot...
i="iptables"

if [ ${UID} -ne 0 ]
then
   cat << EOM >&2
A firewall admin must be an admin to begin with...
EOM
   exit -2
fi

# We'd like to know as much as we can.
common_log_options="\
   --log-level info \
   --log-tcp-seq \
   --log-tcp-options \
   --log-ip-options \
   --log-uid \
"
# Prevent logs from overflowing.
log_limit=3/m
log_burst=3
log_throttle="\
   --match limit \
      --limit ${log_limit} \
      --limit-burst ${log_burst} \
"

function rhs()
{
   cut --fields=2 --delimiter="=" <<< ${@}
}

function sanitise()
{
   # Flush everything.
   ${i} --flush
   ${i} --delete-chain

   # Set chain policy.
   for chain in INPUT OUTPUT FORWARD; do
      ${i} --policy ${chain} ${@}
   done
}

function usage()
{
   if [ "${@}" ]
   then
      cat << EOM
${me}> ${@}
EOM
   fi

   cat << EOM
Implement me!
EOM
}

# Seal the gates.
sanitise DROP

# Option processing.
for option in "${@}"
do
   case ${option} in
      --seal)
         cat <<EOM >&2
You are now cut off from *any* kind of network traffic!
EOM
      # We're done.
      exit 0
      ;;
      --off)
         cat <<EOM >&2
This is dangerous!
EOM
      sanitise ACCEPT
      # We're done.
      exit 0
      ;;
      --geok=*)
         geok=$(rhs ${option})
      ;;
      *)
      usage "Ignoring unknown option '${option}'"
      ;;
   esac
done

if [ -z "${geok}" ]
then
   usage "No geok setting found, assuming geok-A"
   geok=geok-A
fi

inc="${i} --new-chain"
ia="${i} --append"

# Special chains to log & drop/accept packets indiscriminately.
${inc} LOGDROP
${ia} LOGDROP \
   ${log_throttle} \
   --jump LOG \
      --log-prefix "Dropping: " \
      ${common_log_options}
${ia} LOGDROP --jump DROP

${inc} LOGACCEPT
${ia} LOGACCEPT \
   ${log_throttle} \
   --jump LOG \
      --log-prefix "Accepting: " \
      ${common_log_options}
${ia} LOGACCEPT --jump ACCEPT

# Special chain to sever/reset a connection.
${inc} RJCTRST
${ia} RJCTRST --protocol udp --jump REJECT --reject-with icmp-port-unreachable
${ia} RJCTRST --protocol tcp --jump REJECT --reject-with tcp-reset
# In case it wasn't UDP or TCP...
${ia} RJCTRST --jump REJECT

# The forwarding is very simple.
${inc} FWD
${ia} FWD --jump RJCTRST
${ia} FORWARD --jump FWD

# What goes out must not be heading towards sites we eschew.
${inc} EGRESS
${ia} EGRESS --match set --match-set forbidden_sites dst --jump RJCTRST
${ia} EGRESS --jump ACCEPT
${ia} OUTPUT --jump EGRESS

# Incoming traffic is more complicated.  We need more chains
# first.

# Open up HTTP et al. for everyone.  Useful for mastering the ACME challenge when requesting a
# certificate (renewal).  Only use this on an as-needed basis!
${inc} cert-puncture
${ia} cert-puncture \
   --jump LOG \
      --log-prefix "Cert: " \
      ${common_log_options}
# We do not want multiport matching so that we can count things individually.
${ia} cert-puncture --protocol tcp --destination-port https --jump ACCEPT
${ia} cert-puncture --protocol tcp --destination-port 8008 --jump ACCEPT
${ia} cert-puncture --protocol tcp --destination-port http --jump ACCEPT
${ia} cert-puncture \
   --jump LOG \
      --log-prefix 'CERT?!? ' \
      ${common_log_options}
${ia} cert-puncture --jump RJCTRST

# Normal HTTPS.
${inc} HTTPS
# We do not want multiport matching so that we can count things individually.
${ia} HTTPS --protocol tcp --destination-port 8008 --jump RJCTRST
${ia} HTTPS --protocol tcp --destination-port http --jump RJCTRST
${ia} HTTPS --match set --match-set https_bad_guys src --jump RJCTRST
${ia} HTTPS --jump LOGACCEPT

# Invalid packets.  They are a scourge.
${inc} INVALID?
${ia} INVALID? \
   --match conntrack \
      --ctstate INVALID \
   --jump DROP

# The beauty of the ip command is that it is so antique that its
# output format will probably never ever change again.
unset nics
nics=$(ip link | rg --only-matching '^\s*\d+:\s\S+:' | \
   cut --field=2 --delimiter=':')

# Zero network and its associated broadcast address
this_network="0.0.0.0"
this_bcast="255.255.255.255"

# Traffic from within is Ok?  Not quite...
${inc} LANS?
for nic in ${nics}; do
   [ "${nic}" = "lo" ] && continue
   echo -n "${me}> Considering ${nic} for DHCP..."
   ${ia} LANS? \
      --in-interface ${nic} \
      --source ${this_network} \
      --destination ${this_bcast} \
      --protocol udp \
      --source-port bootpc \
      --destination-port bootps \
      --jump ACCEPT \
      --match comment \
         --comment "Is is DHCP?"
    echo "Ok"
done
${ia} LANS? \
   --match set \
      --match-set log-devices src \
   --jump LOG \
      --log-prefix "Logging: " \
      ${common_log_options}
${ia} LANS? \
   --match set \
      --match-set wanted_lans src \
   --jump ACCEPT
${ia} LANS? \
   --match set \
      --match-set unwanted_lans src \
   --jump RJCTRST

# Tear a hole in the firewall.  You must be out of your mind to
# actually use it!
${inc} PUNCTURE
# At least we log it in its entirety.
${ia} PUNCTURE \
   --jump LOG \
      --log-prefix "WTF: " \
      ${common_log_options}
${ia} PUNCTURE --jump ACCEPT

# The wastebasket for everything not otherwise dealt with.
${inc} residuum
${ia} residuum \
   ${log_throttle} \
   --jump LOG \
      --log-prefix "Thrufall: " \
      ${common_log_options}
${ia} residuum --jump RJCTRST

# Secure Shell is well guarded.
${inc} ssh
${ia} ssh \
   --match set \
      --match-set headbanger src \
   --jump LOGACCEPT
${ia} ssh \
   --match set \
      --match-set ssh_good_guys src \
   --jump LOGACCEPT
# Log, but only the "interesting" ones
${ia} ssh \
   --match set \
      ! --match-set dullards src \
   ${log_throttle} \
   --jump LOG \
      --log-prefix "SSHoo: " \
      ${common_log_options}
${ia} ssh --jump RJCTRST

# Handle known/expected things
${inc} SEEN
${ia} SEEN \
   --match conntrack \
      --ctstate RELATED,ESTABLISHED \
   --jump ACCEPT

# Loop-back is OK
${inc} LOOP-BACK
${ia} LOOP-BACK --in-interface lo --jump ACCEPT

# One of the most fundamental rules to banish unsolicited
# incoming traffic.
${inc} GEOK
${ia} GEOK \
   --match set \
      ! --match-set ${geok} src \
   --jump RJCTRST

# During a reboot, DNS info (for NTP, say) needs to be obtained from the ISP's servers.
# Either because we are not running DNS yet or else its cache is found wanting.
${inc} EARLY-DNS
${ia} EARLY-DNS \
	--protocol udp \
	--source-port domain \
	--match set \
		--match-set early-isp-dns src \
	--jump ACCEPT

# Now kludge the INPUT chain from the pieces above.  Note that
# not every element created so far is used permanently; some of
# them are only for transient usage.

iai="${ia} INPUT"

# Speed dictates that we should deal with what we already have
# first.
${iai} --jump SEEN

# Traffic from the loop-back interface.
${iai} --jump LOOP-BACK

# LAN.
${iai} --jump LANS?

# Now's the time to scan for invalid packets.
${iai} --jump INVALID?

# Allow only geographically preselected incoming traffic.
${iai} --jump GEOK

# Crown jewels.
${iai} --protocol tcp                   --destination-port  ssh             --jump ssh
${iai} --protocol tcp --match multiport --destination-ports https,8008,http --jump HTTPS

# Allow seeding the DNS cache during reboots.
${iai} --jump EARLY-DNS

# Log & abort everything else.
${iai} --jump residuum
